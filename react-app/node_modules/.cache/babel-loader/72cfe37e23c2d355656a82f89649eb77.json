{"ast":null,"code":"//################### Actions   ###########################\nconst LOAD_POSTS = 'posts/LOAD_POSTS';\nconst LOAD_ONE = 'posts/LOAD_ONE';\nconst LOAD_USER_POSTS = 'posts/LOAD_USER_POSTS';\nconst CREATE_POST = 'posts/CREATE_POST';\nconst EDIT_POST = 'posts/EDIT_POST';\nconst DELETE_POST = 'posts/DELETE_POST';\n\n//################## Action Creators ######################\nconst loadAll = posts => {\n  return {\n    'type': LOAD_POSTS,\n    posts\n  };\n};\nconst loadOne = post => {\n  return {\n    'type': LOAD_ONE,\n    post\n  };\n};\nconst userPosts = posts => {\n  return {\n    'type': LOAD_USER_POSTS,\n    posts\n  };\n};\nconst createPost = post => {\n  return {\n    'type': CREATE_POST,\n    post\n  };\n};\nconst deletePost = post => {\n  return {\n    'type': DELETE_POST,\n    post\n  };\n};\nconst editPost = newPost => {\n  return {\n    'type': EDIT_POST,\n    newPost\n  };\n};\n\n//######################## Thunks ############################\n\nexport const getAllPosts = () => async dispatch => {\n  const response = await fetch(`/api/posts/`);\n  if (response.ok) {\n    const posts = await response.json();\n    dispatch(loadAll(posts));\n    return posts;\n  }\n  return;\n};\nexport const getOnePost = id => async dispatch => {\n  const response = await fetch(`/api/posts/${id}`);\n  if (response.ok) {\n    const post = await response.json();\n    dispatch(loadOne(post));\n    return post;\n  }\n  return;\n};\nexport const getUserPosts = () => async dispatch => {\n  const response = await fetch(`/api/posts/your-posts`);\n  if (response.ok) {\n    const posts = await response.json();\n    dispatch(userPosts(posts));\n    return posts;\n  }\n  return;\n};\nexport const deleteAPost = postId => async dispatch => {\n  const response = await fetch(`/api/posts/${postId}`, {\n    method: 'DELETE'\n  });\n  if (response.ok) {\n    dispatch(deletePost(postId));\n  }\n};\nexport const createNewPost = newPost => async dispatch => {\n  const response = await fetch(`/api/posts/create-post`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newPost)\n  });\n  if (response.ok) {\n    const post = await response.json();\n    dispatch(createPost(post));\n    return post;\n  }\n  return;\n};\nexport const updatePost = (post, postId) => async dispatch => {\n  const response = await fetch(`/api/posts/${postId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(post)\n  });\n  if (response.ok) {\n    const newQuestion = await response.json();\n    dispatch(editQuestion(newQuestion));\n    return newQuestion;\n  }\n  return;\n};\nlet initialState = {};\n//######################## Reducer ##########################\n\nconst postsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = {};\n  switch (action.type) {\n    case LOAD_POSTS:\n      {\n        newState = {\n          ...action.posts\n        };\n        return newState;\n      }\n    case LOAD_ONE:\n      {\n        newState = {\n          ...action.post.Post\n        };\n        return newState;\n      }\n    case LOAD_USER_POSTS:\n      {\n        newState = {\n          ...action.posts\n        };\n        return newState;\n      }\n    case CREATE_POST:\n      {\n        newState = {\n          ...action.post\n        };\n        return newState;\n      }\n    default:\n      return state;\n  }\n};\nexport default postsReducer;","map":{"version":3,"names":["LOAD_POSTS","LOAD_ONE","LOAD_USER_POSTS","CREATE_POST","EDIT_POST","DELETE_POST","loadAll","posts","loadOne","post","userPosts","createPost","deletePost","editPost","newPost","getAllPosts","dispatch","response","fetch","ok","json","getOnePost","id","getUserPosts","deleteAPost","postId","method","createNewPost","headers","body","JSON","stringify","updatePost","newQuestion","editQuestion","initialState","postsReducer","state","action","newState","type","Post"],"sources":["/Users/calebflores/Desktop/capstone/FourtQuorra/react-app/src/store/posts.js"],"sourcesContent":["//################### Actions   ###########################\nconst LOAD_POSTS = 'posts/LOAD_POSTS'\nconst LOAD_ONE = 'posts/LOAD_ONE'\nconst LOAD_USER_POSTS = 'posts/LOAD_USER_POSTS'\nconst CREATE_POST = 'posts/CREATE_POST'\nconst EDIT_POST = 'posts/EDIT_POST'\nconst DELETE_POST = 'posts/DELETE_POST'\n\n\n//################## Action Creators ######################\nconst loadAll = (posts) => {\n    return {\n        'type': LOAD_POSTS,\n        posts\n    }\n}\n\nconst loadOne = (post) => {\n    return {\n        'type': LOAD_ONE,\n        post\n    }\n}\n\nconst userPosts = (posts) => {\n    return {\n        'type': LOAD_USER_POSTS,\n        posts\n    }\n}\n\nconst createPost = (post) => {\n    return {\n        'type': CREATE_POST,\n        post\n    }\n}\n\nconst deletePost = (post) => {\n    return {\n        'type': DELETE_POST,\n        post\n    }\n}\n\nconst editPost = (newPost) => {\n    return {\n        'type': EDIT_POST,\n        newPost\n    }\n}\n\n//######################## Thunks ############################\n\nexport const getAllPosts = () => async dispatch => {\n    const response = await fetch(`/api/posts/`)\n\n    if (response.ok) {\n        const posts = await response.json()\n        dispatch(loadAll(posts))\n        return posts\n    }\n    return\n}\n\nexport const getOnePost = (id) => async dispatch => {\n    const response = await fetch(`/api/posts/${id}`)\n\n    if (response.ok) {\n        const post = await response.json()\n        dispatch(loadOne(post))\n        return post\n    }\n    return\n}\n\nexport const getUserPosts = () => async dispatch => {\n    const response = await fetch(`/api/posts/your-posts`)\n\n    if (response.ok) {\n        const posts = await response.json()\n        dispatch(userPosts(posts))\n        return posts\n    }\n    return\n}\n\nexport const deleteAPost = (postId) => async dispatch => {\n    const response = await fetch(`/api/posts/${postId}`, {\n        method: 'DELETE'\n    })\n    if (response.ok) {\n        dispatch(deletePost(postId))\n    }\n}\n\nexport const createNewPost = (newPost) => async dispatch => {\n    const response = await fetch(`/api/posts/create-post`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newPost)\n    })\n\n    if (response.ok) {\n        const post = await response.json()\n        dispatch(createPost(post))\n        return post\n    }\n    return\n}\n\nexport const updatePost = (post, postId) => async dispatch => {\n    const response = await fetch(`/api/posts/${postId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(post)\n    })\n\n    if (response.ok) {\n        const newQuestion = await response.json()\n        dispatch(editQuestion(newQuestion))\n        return newQuestion\n    }\n    return\n}\n\nlet initialState = {}\n//######################## Reducer ##########################\n\nconst postsReducer = (state = initialState, action) => {\n    let newState = {}\n    switch (action.type) {\n        case LOAD_POSTS: {\n            newState = { ...action.posts }\n            return newState\n        }\n        case LOAD_ONE: {\n            newState = { ...action.post.Post }\n            return newState\n        }\n        case LOAD_USER_POSTS: {\n            newState = { ...action.posts }\n            return newState\n        }\n        case CREATE_POST: {\n            newState = { ...action.post }\n            return newState\n        }\n        default:\n            return state\n    }\n\n}\n\n\nexport default postsReducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}