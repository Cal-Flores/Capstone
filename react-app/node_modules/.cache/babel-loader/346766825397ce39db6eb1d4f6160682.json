{"ast":null,"code":"//################### Actions   ###########################\nconst LOAD_QUESTIONS = 'questions/LOAD_QUESTIONS';\nconst LOAD_ONE_QUESTION = 'questions/LOAD_ONE_QUESTION';\nconst LOAD_USER_QUESTIONS = 'questions/LOAD_USER_QUESTIONS';\nconst CREATE_QUESTION = 'questions/CREATE_QUESTIONS';\nconst EDIT_QUESTION = 'question/EDIT_QUESTION';\nconst DELETE_QUESTION = 'question/DELETE_QUESTION';\nconst LOAD_RELATED = 'question/LOAD_RELATED';\n\n//################## Action Creators ######################\n\n// loads all questions for splash page\nconst loadAll = questions => {\n  return {\n    'type': LOAD_QUESTIONS,\n    questions\n  };\n};\nconst loadOne = question => {\n  return {\n    'type': LOAD_ONE_QUESTION,\n    question\n  };\n};\nconst userQuestions = questions => {\n  return {\n    'type': LOAD_USER_QUESTIONS,\n    questions\n  };\n};\nconst createQuestion = question => {\n  return {\n    'type': CREATE_QUESTION,\n    question\n  };\n};\nconst editQuestion = newQuestion => {\n  return {\n    'type': EDIT_QUESTION,\n    newQuestion\n  };\n};\nconst deleteQuestion = question => {\n  return {\n    'type': DELETE_QUESTION,\n    question\n  };\n};\nconst loadRelated = rQuestions => {\n  return {\n    'type': LOAD_RELATED,\n    rQuestions\n  };\n};\n\n//######################## Thunks ############################\n\nexport const getAllQuestions = () => async dispatch => {\n  const response = await fetch(`/api/questions/`);\n  if (response.ok) {\n    const questions = await response.json();\n    dispatch(loadAll(questions));\n    return questions;\n  }\n  return;\n};\nexport const getOneProduct = id => async dispatch => {\n  const response = await fetch(`/api/questions/${id}`);\n  if (response.ok) {\n    const question = await response.json();\n    dispatch(loadOne(question));\n    return question;\n  }\n  return;\n};\nexport const getUserQuestions = () => async dispatch => {\n  const response = await fetch(`/api/questions/your-content`);\n  if (response.ok) {\n    const questions = await response.json();\n    dispatch(userQuestions(questions));\n    return questions;\n  }\n  return;\n};\nexport const createNewQuestion = newQuestion => async dispatch => {\n  const response = await fetch(`/api/questions/ask-question`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newQuestion)\n  });\n  if (response.ok) {\n    const question = await response.json();\n    dispatch(createQuestion(question));\n    return question;\n  }\n  return;\n};\nexport const updateQuestion = (question, questionId) => async dispatch => {\n  const response = await fetch(`/api/questions/${questionId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(question)\n  });\n  if (response.ok) {\n    const newQuestion = await response.json();\n    dispatch(editQuestion(newQuestion));\n    return newQuestion;\n  }\n  return;\n};\nexport const deleteAQuestion = questionId => async dispatch => {\n  const response = await fetch(`/api/questions/${questionId}`, {\n    method: 'DELETE'\n  });\n  if (response.ok) {\n    dispatch(deleteQuestion(questionId));\n  }\n};\nexport const getRelatedQuestions = () => async dispatch => {\n  const response = await fetch(`/api/questions/relatedQ`);\n  if (response.ok) {\n    const rQuestions = await response.json();\n    dispatch(loadRelated(rQuestions));\n    return rQuestions;\n  }\n};\nlet initialState = {};\n//######################## Reducer ##########################\n\nconst questionsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = {};\n  switch (action.type) {\n    case LOAD_QUESTIONS:\n      {\n        newState = {\n          ...action.questions\n        };\n        return newState;\n      }\n    case LOAD_ONE_QUESTION:\n      {\n        newState = {\n          ...action.question.Question\n        };\n        return newState;\n      }\n    case LOAD_USER_QUESTIONS:\n      {\n        newState = {\n          ...action.questions\n        };\n        return newState;\n      }\n    case CREATE_QUESTION:\n      {\n        newState = {\n          ...action.question\n        };\n        return newState;\n      }\n    case LOAD_RELATED:\n      {\n        newState = {\n          ...action.rQuestions\n        };\n      }\n    // case EDIT_QUESTION: {\n    //     newState = { ...state }\n    //     newState = { ...action.questions }\n\n    // }\n    // case DELETE_QUESTION: {\n    //     delete newState[action.deleted]\n    //     newState = { ...newState }\n    //     return newState\n    // }\n    default:\n      return state;\n  }\n};\nexport default questionsReducer;","map":{"version":3,"names":["LOAD_QUESTIONS","LOAD_ONE_QUESTION","LOAD_USER_QUESTIONS","CREATE_QUESTION","EDIT_QUESTION","DELETE_QUESTION","LOAD_RELATED","loadAll","questions","loadOne","question","userQuestions","createQuestion","editQuestion","newQuestion","deleteQuestion","loadRelated","rQuestions","getAllQuestions","dispatch","response","fetch","ok","json","getOneProduct","id","getUserQuestions","createNewQuestion","method","headers","body","JSON","stringify","updateQuestion","questionId","deleteAQuestion","getRelatedQuestions","initialState","questionsReducer","state","action","newState","type","Question"],"sources":["/Users/calebflores/Desktop/capstone/FourtQuorra/react-app/src/store/questions.js"],"sourcesContent":["//################### Actions   ###########################\nconst LOAD_QUESTIONS = 'questions/LOAD_QUESTIONS'\nconst LOAD_ONE_QUESTION = 'questions/LOAD_ONE_QUESTION'\nconst LOAD_USER_QUESTIONS = 'questions/LOAD_USER_QUESTIONS'\nconst CREATE_QUESTION = 'questions/CREATE_QUESTIONS'\nconst EDIT_QUESTION = 'question/EDIT_QUESTION'\nconst DELETE_QUESTION = 'question/DELETE_QUESTION'\nconst LOAD_RELATED = 'question/LOAD_RELATED'\n\n\n//################## Action Creators ######################\n\n// loads all questions for splash page\nconst loadAll = (questions) => {\n    return {\n        'type': LOAD_QUESTIONS,\n        questions\n    }\n}\n\nconst loadOne = (question) => {\n    return {\n        'type': LOAD_ONE_QUESTION,\n        question\n    }\n}\n\nconst userQuestions = (questions) => {\n    return {\n        'type': LOAD_USER_QUESTIONS,\n        questions\n    }\n}\n\nconst createQuestion = (question) => {\n    return {\n        'type': CREATE_QUESTION,\n        question\n    }\n}\n\nconst editQuestion = (newQuestion) => {\n    return {\n        'type': EDIT_QUESTION,\n        newQuestion\n    }\n}\n\nconst deleteQuestion = (question) => {\n    return {\n        'type': DELETE_QUESTION,\n        question\n    }\n}\n\nconst loadRelated = (rQuestions) => {\n    return {\n        'type': LOAD_RELATED,\n        rQuestions\n    }\n}\n\n\n\n//######################## Thunks ############################\n\nexport const getAllQuestions = () => async dispatch => {\n    const response = await fetch(`/api/questions/`)\n\n    if (response.ok) {\n        const questions = await response.json()\n        dispatch(loadAll(questions))\n        return questions\n    }\n    return\n}\n\n\nexport const getOneProduct = (id) => async dispatch => {\n    const response = await fetch(`/api/questions/${id}`)\n\n    if (response.ok) {\n        const question = await response.json()\n        dispatch(loadOne(question))\n        return question\n    }\n    return\n}\n\nexport const getUserQuestions = () => async dispatch => {\n    const response = await fetch(`/api/questions/your-content`)\n\n    if (response.ok) {\n        const questions = await response.json()\n        dispatch(userQuestions(questions))\n        return questions\n    }\n    return\n}\n\nexport const createNewQuestion = (newQuestion) => async dispatch => {\n    const response = await fetch(`/api/questions/ask-question`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newQuestion)\n    })\n\n    if (response.ok) {\n        const question = await response.json()\n        dispatch(createQuestion(question))\n        return question\n    }\n    return\n}\n\nexport const updateQuestion = (question, questionId) => async dispatch => {\n    const response = await fetch(`/api/questions/${questionId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(question)\n    })\n\n    if (response.ok) {\n        const newQuestion = await response.json()\n        dispatch(editQuestion(newQuestion))\n        return newQuestion\n    }\n    return\n}\n\nexport const deleteAQuestion = (questionId) => async dispatch => {\n    const response = await fetch(`/api/questions/${questionId}`, {\n        method: 'DELETE'\n    })\n    if (response.ok) {\n        dispatch(deleteQuestion(questionId))\n    }\n}\n\nexport const getRelatedQuestions = () => async dispatch => {\n    const response = await fetch(`/api/questions/relatedQ`)\n\n    if (response.ok) {\n        const rQuestions = await response.json()\n        dispatch(loadRelated(rQuestions))\n        return rQuestions\n    }\n}\n\nlet initialState = {}\n//######################## Reducer ##########################\n\nconst questionsReducer = (state = initialState, action) => {\n    let newState = {}\n    switch (action.type) {\n        case LOAD_QUESTIONS: {\n            newState = { ...action.questions }\n            return newState\n        }\n        case LOAD_ONE_QUESTION: {\n            newState = { ...action.question.Question }\n            return newState\n        }\n        case LOAD_USER_QUESTIONS: {\n            newState = { ...action.questions }\n            return newState\n        }\n        case CREATE_QUESTION: {\n            newState = { ...action.question }\n            return newState\n        }\n        case LOAD_RELATED: {\n            newState = { ...action.rQuestions }\n        }\n        // case EDIT_QUESTION: {\n        //     newState = { ...state }\n        //     newState = { ...action.questions }\n\n        // }\n        // case DELETE_QUESTION: {\n        //     delete newState[action.deleted]\n        //     newState = { ...newState }\n        //     return newState\n        // }\n        default:\n            return state\n    }\n}\n\n\nexport default questionsReducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}