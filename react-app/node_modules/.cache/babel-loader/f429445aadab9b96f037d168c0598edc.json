{"ast":null,"code":"var _jsxFileName = \"/Users/calebflores/Desktop/capstone/FourtQuorra/react-app/src/components/CreateQuestionForm/CreatePostForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { createNewPost, getAllPosts } from '../../store/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostForm(_ref) {\n  _s();\n  let {\n    setShowModal\n  } = _ref;\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [body, setBody] = useState('');\n  const [image, setImage] = useState(null);\n  const [type, setType] = useState('post');\n  const [imageLoading, setImageLoading] = useState(false);\n  const [error, setError] = useState([]);\n  useEffect(() => {\n    let err = [];\n    if (body.length > 2500 || body.length < 4) err.push('Body must be between 4 and 2500 characters');\n    setError(err);\n  }, [body]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let payload = {\n      body,\n      image,\n      type\n    };\n    let images = document.querySelector(\".imagesInput\");\n    let formData;\n    // console.log(images.files.length)\n    if (images.files.length) {\n      formData = new FormData();\n      for (const img of images.files) {\n        formData.append(\"image\", img);\n      }\n      setImageLoading(true);\n      const res = await fetch('/api/posts/images', {\n        method: \"POST\",\n        body: formData\n      });\n      if (res.ok) {\n        let data = await res.json();\n        const dataToArr = data.images.replace(/[\\[\\]']+/g, '').split(', ');\n        payload.images = payload.images.concat(dataToArr).filter(e => e);\n        editPostFunc(payload, postInfo.id);\n      } else {\n        let data = await res.json();\n        setImageLoading(false);\n        setErrors(data);\n      }\n    } else {\n      editPostFunc(payload, postInfo.id);\n    }\n  };\n  const updateImage = e => {\n    const file = e.target.files[0];\n    setImage(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"qumodalcontainer\",\n      children: [error.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"error-map\",\n        children: error.map((err, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: err\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"qmodalwrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qdiv\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: updateImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), imageLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 44\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qdiv\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            contendable: true,\n            className: \"q2input\",\n            required: true,\n            minlength: \"4\",\n            maxlength: \"2501\",\n            type: \"text\",\n            placeholder: \"Say something...\",\n            value: body,\n            onChange: e => setBody(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cancelmodal\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"qmbtn\",\n              disabled: !!error.length,\n              type: \"submit\",\n              children: \"Create Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setShowModal(false),\n            className: \"canceltxt\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(PostForm, \"tyn94ACFp/TyLqWgyj/1Pr/ipS8=\", false, function () {\n  return [useDispatch, useHistory];\n});\n_c = PostForm;\nexport default PostForm;\nvar _c;\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","useHistory","createNewPost","getAllPosts","PostForm","setShowModal","dispatch","history","body","setBody","image","setImage","type","setType","imageLoading","setImageLoading","error","setError","err","length","push","handleSubmit","e","preventDefault","payload","images","document","querySelector","formData","files","FormData","img","append","res","fetch","method","ok","data","json","dataToArr","replace","split","concat","filter","editPostFunc","postInfo","id","setErrors","updateImage","file","target","map","i","value"],"sources":["/Users/calebflores/Desktop/capstone/FourtQuorra/react-app/src/components/CreateQuestionForm/CreatePostForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { createNewPost, getAllPosts } from '../../store/posts'\n\n\n\nfunction PostForm({ setShowModal }) {\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const [body, setBody] = useState('')\n    const [image, setImage] = useState(null)\n    const [type, setType] = useState('post')\n    const [imageLoading, setImageLoading] = useState(false);\n    const [error, setError] = useState([])\n\n    useEffect(() => {\n        let err = []\n        if (body.length > 2500 || body.length < 4) err.push('Body must be between 4 and 2500 characters')\n        setError(err)\n\n    }, [body])\n\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n        let payload = {\n            body,\n            image,\n            type\n        }\n        let images = document.querySelector(\".imagesInput\")\n        let formData\n        // console.log(images.files.length)\n        if (images.files.length) {\n            formData = new FormData();\n            for (const img of images.files) {\n                formData.append(\"image\", img);\n            }\n            setImageLoading(true);\n            const res = await fetch('/api/posts/images', {\n                method: \"POST\",\n                body: formData,\n            });\n\n            if (res.ok) {\n                let data = await res.json();\n                const dataToArr = (data.images.replace(/[\\[\\]']+/g, '')).split(', ')\n                payload.images = (payload.images.concat(dataToArr)).filter(e => e)\n\n                editPostFunc(payload, postInfo.id)\n            }\n            else {\n                let data = await res.json()\n                setImageLoading(false);\n                setErrors(data)\n            }\n        }\n        else {\n            editPostFunc(payload, postInfo.id)\n        }\n    }\n\n    const updateImage = (e) => {\n        const file = e.target.files[0];\n        setImage(file);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className='qumodalcontainer'>\n                {error.length > 0 && (\n                    <ul className=\"error-map\">{error.map((err, i) => (\n                        <li key={i}>{err}</li>\n                    ))}\n                    </ul>\n                )}\n                <div className='qmodalwrapper'>\n                    <div className='qdiv'>\n                        {/* <input className='q1input' required minlength='4' type='text' placeholder='Post Image Url' value={image} onChange={(e) => setImage(e.target.value)} /> */}\n                        <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={updateImage}\n                        />\n                        <button type=\"submit\">Submit</button>\n                        {(imageLoading) && <p>Loading...</p>}\n                    </div>\n                    <div className='qdiv'>\n                        <textarea contendable className='q2input' required minlength='4' maxlength='2501' type='text' placeholder='Say something...' value={body} onChange={(e) => setBody(e.target.value)} />\n                    </div>\n                    <div className='cancelmodal'>\n                        <div>\n                            <button className='qmbtn' disabled={!!error.length} type='submit'>Create Post</button>\n                        </div>\n                        <div onClick={() => setShowModal(false)} className='canceltxt'>Cancel</div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default PostForm\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}